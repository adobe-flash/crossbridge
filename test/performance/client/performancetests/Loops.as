/*** PerformanceTest by Grant Skinner. Apr 21, 2009* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2009 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package performancetests {		public class Loops {			// Constants:			// Public Properties:		// optional property specifying the default number of iterations to run each test in the suite.		public var iterations:uint=5;		// optional property specifying a description to be used when reporting on this test suite:		public var description:String = "Test different loop structures.";		// optional property specifying the list of methods to run, in order.		// the empty strings insert dividers in the default logging.		public var methods:Array = ["forIncrement",									"forDecrement",									"",									"whileIncrement",									"whileDecrement",									"",									"doWhileIncrement",									"doWhileDecrement",									"",									"forIn",									"forEachIn",									"forEachInUntyped",									"forEachInPosttyped",									"",									"arrForEach"];				// sets the length of the vector to be used in all tests:		public var length:uint = 1000000;												// Protected Properties:		// the vector to be used in all tests (so the construction cost isn't included in the test time):		protected var arr:Vector.<Boolean> = new Vector.<Boolean>(length);			// Initialization:			// Public getter / setters:			// Public Methods:			public function forIncrement():void {			for (var i:uint=0; i<length; i++) {				var a:uint = i;			}		}				public function forDecrement():void {			for (var i:uint=length; i>0; i--) {				var a:uint = i-1;			}		}				public function whileIncrement():void {			var i:uint = 0;			while (i < length) {				var a:uint = i;				i++;			}		}				public function whileDecrement():void {			var i:uint = length;			while (--i) {				var a:uint = i;			}		}				public function doWhileIncrement():void {			var i:uint = 0;			do {				var a:uint = i;			} while (++i < length);		}				public function doWhileDecrement():void {			var i:uint = length-1;			do {				var a:uint = i;			} while (i--);		}				public function forIn():void {			for (var b:* in arr) {				var a:uint = b;			}		}				public function forEachIn():void {			for each (var b:Boolean in arr) {				var a:uint = length;			}		}				public function forEachInUntyped():void {			for each (var b:* in arr) {				var a:uint = length;			}		}				public function forEachInPosttyped():void {			for each (var b:* in arr) {				var c:Boolean = b as Boolean;				var a:uint = length;			}		}				public function arrForEach():void {			arr.forEach(arrForEachF);		}			// Protected Methods:		// note that protected/private methods aren't tested.		protected function arrForEachF(item:Boolean, index:int, arr:Vector.<Boolean>):void {			var a:uint = index;		}	}	}