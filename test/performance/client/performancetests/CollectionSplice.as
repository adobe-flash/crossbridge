/*** PerformanceTest by Grant Skinner. Apr 21, 2009* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2009 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package performancetests {		import flash.utils.Dictionary;		public class CollectionSplice {			// Constants:			// Public Properties:		// optional property specifying the default number of iterations to run each test in the suite.		public var iterations:uint=2;		// optional property specifying a description to be used when reporting on this test suite:		public var description:String = "Testing constructing, populating, and iterating different collections."		public var methods:Array = ["tare","array", "vector", "linkedList","dictionary", "hash"];		//public var methodLabels:Array = ["", "array", "vector", "linkedList"]; 				// the number of elements in each collection:		public var loops:uint = 100000;			// Protected Properties:		protected var removeCount:uint = loops/10>>0;				// set up some variables used in the test:		var arr:Array;		var vec:Vector.<Number>;		var ll:LinkedList;		var dic:Dictionary;		var obj:Object;			// Initialization:			// Public getter / setters:			// Public Methods:		public function CollectionSplice() {			arr = [];			for (var i:uint=0; i<loops; i++) {				arr[i] = i/3;			}						vec = new Vector.<Number>();			for (i=0; i<loops; i++) {				vec[i] = i/3;			}						var o:LinkedList;			var old:LinkedList;			for (i=0; i<loops; i++) {				old = o;				o = new LinkedList(i/3,old);				if (old) { old.next = o; }				if (i == loops>>1) { ll = o; }			}						dic = new Dictionary();			for (i=0; i<loops; i++) {				dic[i] = true;			}						obj = {};			for (i=0; i<loops; i++) {				obj["_"+i] = true;			}		}			// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		public function tare():void {			for (var i:uint=0; i<loops; i++) {							}		}				public function array():void {			for (var i:uint=0; i<removeCount; i++) {				arr.splice(i,1);			}		}				public function vector():void {			for (var i:uint=0; i<removeCount; i++) {				vec.splice(i,1);			}		}				public function linkedList():void {			var o:LinkedList = ll;			for (var i:uint=0; i<removeCount; i++) {				o.prev.next = o.next;				o.next.prev = o.prev;				o = o.next;			}		}				public function dictionary():void {			for (var i:uint=0; i<removeCount; i++) {				delete(dictionary[i]);			}		}				public function hash():void {			for (var i:uint=0; i<removeCount; i++) {				delete(hash["_"+i]);			}		}			// Protected Methods:			}	}class LinkedList {		public var prev:LinkedList;	public var next:LinkedList;	public var value:Number;		public function LinkedList(value:Number,prev:LinkedList) {		this.value = value;		this.prev = prev;	}}