/*** PerformanceTest by Grant Skinner. Apr 21, 2009* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2009 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package performancetests {		import flash.display.Shape;	import flash.display.Graphics;	import flash.display.GraphicsPathCommand;		public class GraphicsTests {			// Constants:			// Public Properties:		public var iterations:uint=2;		public var description:String = ""		public var methods:Array = ["tare","fullPath", "reference", "withGraphics"];		public var methodLabels:Array = ["", "full path", "reference", "with"]; 				// the number of loops to run in every test:		public var loops:uint = 100000;			// Protected Properties:		// a shape instance to use in every test:		protected var shape:Shape = new Shape();		// used for tests that draw a bunch of smaller shapes:		protected var shortLoops:uint = 100;		protected var shortIterations:uint = 1000;			// Initialization:			// Public getter / setters:			// Public Methods:		// tare method that will be run to calculate the base time required to run the loop		// and ancillary graphics operations so it can be subtracted from the other test results.		public function tare():void {			shape.graphics.lineStyle(0,0,1);			for (var i:uint=0; i<loops; i++) {				// nothing.			}			shape.graphics.clear();		}				// note that these tests do not test the time required to render the graphic, only to		// generate the vector data. You could use testRender to test the render time.		public function fullPath():void {			shape.graphics.lineStyle(0,0,1);			for (var i:uint=0; i<loops; i++) {				shape.graphics.lineTo(i%100*3,i%200);			}			shape.graphics.clear();		}				public function reference():void {			shape.graphics.lineStyle(0,0,1);			var g:Graphics = shape.graphics;			for (var i:uint=0; i<loops; i++) {				g.lineTo(i%100*3,i%200);			}			shape.graphics.clear();		}						public function shortReference():void {			for (var j:uint=0; j<shortIterations; j++) {				shape.graphics.lineStyle(0,0,1);				var g:Graphics = shape.graphics;				for (var i:uint=0; i<shortLoops; i++) {					g.lineTo(i%100*3,i%200);				}				shape.graphics.clear();			}		}				public function withGraphics():void {			shape.graphics.lineStyle(0,0,1);			with (shape.graphics) {				for (var i:uint=0; i<loops; i++) {					lineTo(i%100*3,i%200);				}			}			shape.graphics.clear();		}				public function drawPath():void {			shape.graphics.lineStyle(0,0,1);			var cmds:Vector.<int> = new Vector.<int>(loops,true);			var data:Vector.<Number> = new Vector.<Number>(loops*2,true);			var cmd:int = GraphicsPathCommand.LINE_TO;			for (var i:uint=0; i<loops; i++) {				cmds[i] = cmd;				data[i*2] = i%100*3;				data[i*2+1] = i%200;			}			shape.graphics.drawPath(cmds,data);			shape.graphics.clear();		}				public function drawPathShort():void {			for (var j:uint=0; j<shortIterations; j++) {				shape.graphics.lineStyle(0,0,1);				var cmds:Vector.<int> = new Vector.<int>(shortLoops,true);				var data:Vector.<Number> = new Vector.<Number>(shortLoops*2,true);				var cmd:int = GraphicsPathCommand.LINE_TO;				for (var i:uint=0; i<shortLoops; i++) {					cmds[i] = cmd;					data[i*2] = i%100*3;					data[i*2+1] = i%200;				}				shape.graphics.drawPath(cmds,data);				shape.graphics.clear();			}		}			// Protected Methods:			}	}