package com.gskinner.motion.plugins {		import com.gskinner.motion.GTween;	import com.gskinner.geom.ColorMatrix;	import flash.filters.ColorMatrixFilter;	import com.gskinner.motion.plugins.IGTweenPlugin;		public class ColorAdjustPlugin implements IGTweenPlugin {				public static var enabled:Boolean=true;				protected static var instance:ColorAdjustPlugin;				public static function install():void {			if (instance) { return; }			instance = new ColorAdjustPlugin();			GTween.installPlugin(instance,"brightness");			GTween.installPlugin(instance,"contrast");			GTween.installPlugin(instance,"hue");			GTween.installPlugin(instance,"saturation");		}				public function init(tween:GTween, name:String, value:Number):Number {			if (tween.pluginData.ColorAdjustData == null) {				// try to find an existing color matrix filter on the target:				var f:Array = tween.target.filters;				for (var i:uint=0; i<f.length; i++) {					if (f[i] is ColorMatrixFilter) {						var cmF:ColorMatrixFilter = f[i];						var o:Object = {index:i,ratio:NaN};												// save off the initial matrix:						o.initMatrix = cmF.matrix;												// save off the target matrix:						o.matrix = getMatrix(tween);												tween.pluginData.ColorAdjustData = o;					}				}			}						// make up an initial value that will let us get a 0-1 ratio back later:			return tween.getValue(name)-1;		}				public function tween(tween:GTween, name:String, value:Number, initValue:Number, rangeValue:Number, ratio:Number, end:Boolean):Number {			if (!(tween.pluginData.ColorAdjustEnabled || enabled)) { return value; }						var data:Object = tween.pluginData.ColorAdjustData;			if (data == null) { data = initTarget(tween); }						// only run once per tween tick, regardless of how many properties we're dealing with:			if (ratio == data.ratio) { return value; }			data.ratio = ratio;						ratio = value-initValue;						var f:Array = tween.target.filters;			var cmF:ColorMatrixFilter = f[data.index] as ColorMatrixFilter;			if (cmF == null) { return value; }						var initMatrix:Array = data.initMatrix;			var targMatrix:Array = data.matrix;						if (rangeValue < 0) {				// values were swapped.				initMatrix = targMatrix;				targMatrix = data.initMatrix;				ratio *= -1;			}						var matrix:Array = cmF.matrix;			var l:uint = matrix.length;			for (var i:uint=0; i<l; i++) {				matrix[i] = initMatrix[i]+(targMatrix[i]-initMatrix[i])*ratio;			}			cmF.matrix = matrix;						tween.target.filters = f;			return value;		}				protected function getMatrix(tween:GTween):ColorMatrix {			var brightness:Number = fixValue(tween.getValue("brightness"));			var contrast:Number = fixValue(tween.getValue("contrast"));			var saturation:Number = fixValue(tween.getValue("saturation"));			var hue:Number = fixValue(tween.getValue("hue"));			var mtx:ColorMatrix = new ColorMatrix();			mtx.adjustColor(brightness,contrast,saturation,hue);			return mtx;		}						protected function initTarget(tween:GTween):Object {			var f:Array = tween.target.filters;			var mtx:ColorMatrix = new ColorMatrix();			f.push(new ColorMatrixFilter(mtx));			tween.target.filters = f;			var o:Object = {index:f.length-1, ratio:NaN};			o.initMatrix = mtx;			o.matrix = getMatrix(tween);			return tween.pluginData.ColorAdjustData = o;		}				protected function fixValue(value:Number):Number {			return isNaN(value) ? 0 : value;		}					}}