GNU gdb (GDB) 7.3
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "--host=IGNORE --target=avm2-elf".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
No symbol table is loaded.  Use the "file" command.
Breakpoint 1 (main) pending.
0xdddddddd in ?? ()

Breakpoint 1, INSTRUCTPT in main (argc=0, argv=0x200ff0) at nestedFunctions.c:36
36	    int s = 1;
# step
37	    int t = 2;
# step
39	    printf("Hello, World!\n");
# step
41	    int v = nestedFunction1(s);
# step
INSTRUCTPT in nestedFunction1 (a=1) at nestedFunctions.c:12
12		int sum = 0;
# step
15		for (i = 0; i < a; i++){
# step
16			sum += i;
# step
17			sum += nestedFunction2(i);
# step
INSTRUCTPT in nestedFunction2 (a=0) at nestedFunctions.c:25
25	    return a * a;
# step
INSTRUCTPT in nestedFunction1 (a=1) at nestedFunctions.c:17
17			sum += nestedFunction2(i);
# step
18			nestedFunction3(a, i, sum);
# step
INSTRUCTPT in nestedFunction3 (a=1, i=0, sum=0) at nestedFunctions.c:31
31		printf("a=%d, i=%d, sum=%d", a, i, sum);
# step
32	}
# step
INSTRUCTPT in nestedFunction1 (a=1) at nestedFunctions.c:18
18			nestedFunction3(a, i, sum);
# step
15		for (i = 0; i < a; i++){
# step
20	    return sum;
# step
INSTRUCTPT in main (argc=0, argv=0x200ff0) at nestedFunctions.c:41
41	    int v = nestedFunction1(s);
# step
42	    printf("v=%d", v);
# step
44	    int u = nestedFunction1(t);    
# step
INSTRUCTPT in nestedFunction1 (a=2) at nestedFunctions.c:12
12		int sum = 0;
# step
15		for (i = 0; i < a; i++){
# step
16			sum += i;
# step
17			sum += nestedFunction2(i);
# step
INSTRUCTPT in nestedFunction2 (a=0) at nestedFunctions.c:25
25	    return a * a;
# step
INSTRUCTPT in nestedFunction1 (a=2) at nestedFunctions.c:17
17			sum += nestedFunction2(i);
# step
18			nestedFunction3(a, i, sum);
# step
INSTRUCTPT in nestedFunction3 (a=2, i=0, sum=0) at nestedFunctions.c:31
31		printf("a=%d, i=%d, sum=%d", a, i, sum);
# step
32	}
# step
INSTRUCTPT in nestedFunction1 (a=2) at nestedFunctions.c:18
18			nestedFunction3(a, i, sum);
# step
15		for (i = 0; i < a; i++){
# step
16			sum += i;
# step
17			sum += nestedFunction2(i);
# step
INSTRUCTPT in nestedFunction2 (a=1) at nestedFunctions.c:25
25	    return a * a;
# step
INSTRUCTPT in nestedFunction1 (a=2) at nestedFunctions.c:17
17			sum += nestedFunction2(i);
# step
18			nestedFunction3(a, i, sum);
# step
INSTRUCTPT in nestedFunction3 (a=2, i=1, sum=2) at nestedFunctions.c:31
31		printf("a=%d, i=%d, sum=%d", a, i, sum);
# step
32	}
# step
INSTRUCTPT in nestedFunction1 (a=2) at nestedFunctions.c:18
18			nestedFunction3(a, i, sum);
# step
15		for (i = 0; i < a; i++){
# step
20	    return sum;
# step
INSTRUCTPT in main (argc=0, argv=0x200ff0) at nestedFunctions.c:44
44	    int u = nestedFunction1(t);    
# step
45	    printf("u=%d", u);
# step
47		printf("again=%d, %d", nestedFunction1(s), nestedFunction1(t));
# step
INSTRUCTPT in nestedFunction1 (a=1) at nestedFunctions.c:12
12		int sum = 0;
# step
15		for (i = 0; i < a; i++){
# step
16			sum += i;
# step
17			sum += nestedFunction2(i);
# step
INSTRUCTPT in nestedFunction2 (a=0) at nestedFunctions.c:25
25	    return a * a;
# step
INSTRUCTPT in nestedFunction1 (a=1) at nestedFunctions.c:17
17			sum += nestedFunction2(i);
# step
18			nestedFunction3(a, i, sum);
# step
INSTRUCTPT in nestedFunction3 (a=1, i=0, sum=0) at nestedFunctions.c:31
31		printf("a=%d, i=%d, sum=%d", a, i, sum);
# step
32	}
# step
INSTRUCTPT in nestedFunction1 (a=1) at nestedFunctions.c:18
18			nestedFunction3(a, i, sum);
# step
15		for (i = 0; i < a; i++){
# step
20	    return sum;
# step
INSTRUCTPT in main (argc=0, argv=0x200ff0) at nestedFunctions.c:47
47		printf("again=%d, %d", nestedFunction1(s), nestedFunction1(t));
# step
INSTRUCTPT in nestedFunction1 (a=2) at nestedFunctions.c:12
12		int sum = 0;
# step
15		for (i = 0; i < a; i++){
# step
16			sum += i;
# step
17			sum += nestedFunction2(i);
# step
INSTRUCTPT in nestedFunction2 (a=0) at nestedFunctions.c:25
25	    return a * a;
# step
INSTRUCTPT in nestedFunction1 (a=2) at nestedFunctions.c:17
17			sum += nestedFunction2(i);
# step
18			nestedFunction3(a, i, sum);
# step
INSTRUCTPT in nestedFunction3 (a=2, i=0, sum=0) at nestedFunctions.c:31
31		printf("a=%d, i=%d, sum=%d", a, i, sum);
# step
32	}
# step
INSTRUCTPT in nestedFunction1 (a=2) at nestedFunctions.c:18
18			nestedFunction3(a, i, sum);
# step
15		for (i = 0; i < a; i++){
# step
16			sum += i;
# step
17			sum += nestedFunction2(i);
# step
INSTRUCTPT in nestedFunction2 (a=1) at nestedFunctions.c:25
25	    return a * a;
# step
INSTRUCTPT in nestedFunction1 (a=2) at nestedFunctions.c:17
17			sum += nestedFunction2(i);
# step
18			nestedFunction3(a, i, sum);
Kill the program being debugged? (y or n) [answered Y; input not from terminal]
